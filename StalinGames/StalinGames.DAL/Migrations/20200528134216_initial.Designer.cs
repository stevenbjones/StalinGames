// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200528134216_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "4e1a5903-457c-47b5-afac-5fef012d7126",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "cf932e92-4a0a-452b-b01c-4a6df13bc287",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "bb08310d-14d6-4f1e-a0c1-39830fc61edf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "bf4eb055-33b5-4419-a85e-031bcd617aef",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "c816484c-94f8-4af5-83fc-dcea7fd00bf1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "cf55a117-bfd3-42be-a332-606dd54aa320",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "b2e25bb9-497c-4ab0-8a69-f532e36bcf9c",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "cf895424-4a41-4ffd-bbb6-bea989caa874",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "85423698-f6d8-4e96-a832-b2606b08fe7a",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "a63688f1-3bf4-425e-8d01-a82036fa9ed7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2cf2d837-0f65-43b0-8085-9fa576c485e2",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "e4542553-52f4-45f4-9456-a1b8860cc6b0",
                            Name = "Simp",
                            Price = 2000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "b77c0e0d-045c-4a2f-8c5b-78aeadbc3bd8",
                            Name = "Local Champion",
                            Price = 10000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "48ca6577-c9eb-49b1-bc6f-02f648e5521f",
                            Name = "Absolute Legend",
                            Price = 100000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "1ec081d6-a310-4e8a-aca8-4e5a255fdbd2",
                            Name = "Black jack master",
                            Price = 200000,
                            Type = 1,
                            Value = "BlackJackMaster.jpg"
                        },
                        new
                        {
                            ItemID = "e5c1f8c8-9cba-4f53-b346-230a70a139b7",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Type = 1,
                            Value = "CardPattern.jpg"
                        },
                        new
                        {
                            ItemID = "47202c9d-de11-49e8-a70e-e6772542ebe7",
                            Name = "Casino master",
                            Price = 500000,
                            Type = 1,
                            Value = "CasinoMaster.jpg"
                        },
                        new
                        {
                            ItemID = "c3caace3-b25b-4c3e-8008-b04dc0428a03",
                            Name = "Ace on fire",
                            Price = 50000,
                            Type = 1,
                            Value = "FireAce.jpg"
                        },
                        new
                        {
                            ItemID = "56c353d8-5bf4-48e5-ac79-28982a1daa57",
                            Name = "Roulette master",
                            Price = 200000,
                            Type = 1,
                            Value = "RouletteMaster.jpg"
                        },
                        new
                        {
                            ItemID = "c5e041b3-7517-4127-87a2-3f69fbd60957",
                            Name = "Slot machine master",
                            Price = 200000,
                            Type = 1,
                            Value = "SlotMachineMaster.jpg"
                        },
                        new
                        {
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            Name = "Gambler",
                            Price = 0,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "b1667254-c2e8-4736-81d8-a5f9006ae5e1",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "edfab11a-6341-4aaa-af8e-e1613cc93b40",
                            Name = "KingPin",
                            Price = 1000000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            Name = "Default background",
                            Price = 0,
                            Type = 1,
                            Value = "DefaultBackground.jpg"
                        },
                        new
                        {
                            ItemID = "2c4c5b95-7fe1-4692-811f-627008072097",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Type = 1,
                            Value = "TrueStalinGamesMaster.jpg"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "6af571a4-5296-4547-a3fb-58c637de73b0",
                            ItemID = "b1667254-c2e8-4736-81d8-a5f9006ae5e1",
                            UserID = "bf4eb055-33b5-4419-a85e-031bcd617aef"
                        },
                        new
                        {
                            OrderID = "a7cfb39d-4699-4ea2-a2e9-e25e5946bd6e",
                            ItemID = "edfab11a-6341-4aaa-af8e-e1613cc93b40",
                            UserID = "bf4eb055-33b5-4419-a85e-031bcd617aef"
                        },
                        new
                        {
                            OrderID = "30f79c9f-2c7a-40ca-b8aa-e103f5e6d0fe",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "bf4eb055-33b5-4419-a85e-031bcd617aef"
                        },
                        new
                        {
                            OrderID = "b3f6483d-084c-42e2-87f5-c2eab193a951",
                            ItemID = "2c4c5b95-7fe1-4692-811f-627008072097",
                            UserID = "bf4eb055-33b5-4419-a85e-031bcd617aef"
                        },
                        new
                        {
                            OrderID = "71b88d57-3ad1-4a9d-871a-96fa1a6387ab",
                            ItemID = "b1667254-c2e8-4736-81d8-a5f9006ae5e1",
                            UserID = "a63688f1-3bf4-425e-8d01-a82036fa9ed7"
                        },
                        new
                        {
                            OrderID = "4b5ab78c-68ee-4f83-88a9-08325379c683",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "a63688f1-3bf4-425e-8d01-a82036fa9ed7"
                        },
                        new
                        {
                            OrderID = "609fd33c-281d-4312-b030-bda79b1d15a8",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "cf895424-4a41-4ffd-bbb6-bea989caa874"
                        },
                        new
                        {
                            OrderID = "9145c792-4320-45e8-a180-4133c139bea4",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "85423698-f6d8-4e96-a832-b2606b08fe7a"
                        },
                        new
                        {
                            OrderID = "b6113494-58b9-4534-ae9c-e321f3fc75f3",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "2cf2d837-0f65-43b0-8085-9fa576c485e2"
                        },
                        new
                        {
                            OrderID = "1378f5fd-509c-40d5-a367-ef10d1e2ee70",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "a63688f1-3bf4-425e-8d01-a82036fa9ed7"
                        },
                        new
                        {
                            OrderID = "ee42d1cb-2753-4298-b97f-9d712800a71d",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "cf895424-4a41-4ffd-bbb6-bea989caa874"
                        },
                        new
                        {
                            OrderID = "7e5e6436-6f09-4be5-97e1-fd0b475d22fc",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "85423698-f6d8-4e96-a832-b2606b08fe7a"
                        },
                        new
                        {
                            OrderID = "ebf67922-41bd-45a7-8a11-6c75b094b95d",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "2cf2d837-0f65-43b0-8085-9fa576c485e2"
                        },
                        new
                        {
                            OrderID = "b6ca8ddc-bcf6-43d1-8d75-181f1d8e546d",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "cf55a117-bfd3-42be-a332-606dd54aa320"
                        },
                        new
                        {
                            OrderID = "e27807a7-48c5-4de5-9e4a-fafee02f50b4",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "c816484c-94f8-4af5-83fc-dcea7fd00bf1"
                        },
                        new
                        {
                            OrderID = "349778d5-34df-442b-9b2a-142f9e63b017",
                            ItemID = "c6e73f10-d06e-49d8-99e4-11eaf012a6e0",
                            UserID = "b2e25bb9-497c-4ab0-8a69-f532e36bcf9c"
                        },
                        new
                        {
                            OrderID = "55423ed8-5830-47f7-aa52-23b7bfea4004",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "cf55a117-bfd3-42be-a332-606dd54aa320"
                        },
                        new
                        {
                            OrderID = "e75386e0-0ef9-4017-a3f2-a23a82e53fc6",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "c816484c-94f8-4af5-83fc-dcea7fd00bf1"
                        },
                        new
                        {
                            OrderID = "1ba4edfe-d4c4-41a9-8307-1bc800cc0f11",
                            ItemID = "0324ab62-f514-4a8b-bddd-39cad3f7f006",
                            UserID = "b2e25bb9-497c-4ab0-8a69-f532e36bcf9c"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "bf4eb055-33b5-4419-a85e-031bcd617aef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb75ca58-0b08-4889-bd2c-cd0fe560ef04",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEBD/6L4wXcAHNa1rxqiPg3kRvBOIAujS2nHe8YR15F4ubAKsqEylXt6LYzh1aUB5/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86670858-9f0c-433b-848e-2858bfadb695",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "bf4eb055-33b5-4419-a85e-031bcd617aef",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "KingPin",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "c816484c-94f8-4af5-83fc-dcea7fd00bf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71553c34-6573-4978-9634-4b596eac942f",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAENLAqaEvQDJq0h3xYS19H8lrR+HOky3ZDnDK+61Ag/MhfrMcOC8Hb9tBTiW9IY+8sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "569ecf17-2c97-4800-b43e-25e5e0e45b7c",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "c816484c-94f8-4af5-83fc-dcea7fd00bf1",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "cf55a117-bfd3-42be-a332-606dd54aa320",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57b8f2d5-ecc5-4799-aa5b-402450db980d",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEIyv4qJ1/gaMsOk1SogLuJAUGiGg27SAnrKxrlZEEfzHVspEs7jv3QHk8No8mrsjHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddb957af-718d-45c5-ab53-8f3195f7f952",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "cf55a117-bfd3-42be-a332-606dd54aa320",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "b2e25bb9-497c-4ab0-8a69-f532e36bcf9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60a3b23a-8f8d-4292-bdc1-d2f10a7dbcd5",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2cRB+fJVQcwCfOgv2SXWrI0ZC3nNak6MEgEUOpHNm2bMLHcFhHU90BlLnsLXK8og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a03447d6-f243-4d49-8cdd-ee910929a8a9",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "b2e25bb9-497c-4ab0-8a69-f532e36bcf9c",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "cf895424-4a41-4ffd-bbb6-bea989caa874",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2d16a2c-cc98-405f-9ffd-8a8496d070a1",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAELCGXk2GO/XSBCEB1nApSsYn4TCRuWNPGn0WYiD0O9dMbx6s6AI3XCRWlrjC4xTS3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "108deef5-14db-4516-8fc6-953bb4d0b4dd",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "cf895424-4a41-4ffd-bbb6-bea989caa874",
                            LastGamePlayed = 1590673335L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "85423698-f6d8-4e96-a832-b2606b08fe7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0f86459-57d3-48e6-9474-6166b897f44e",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEE1Cz9VBJ3V4pEswQhqBeelrc5ArNV9FhnCROIjUHscyOyaKC3Owp9DgiO44xqh26Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77cb2496-afdf-4878-98ca-62c2cecf7741",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "85423698-f6d8-4e96-a832-b2606b08fe7a",
                            LastGamePlayed = 1590673335L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "a63688f1-3bf4-425e-8d01-a82036fa9ed7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a9fc742-58da-489a-9958-79731a4e631a",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLzRqzfeHHBx1YX49uL37LghmqOrGioc36eX14WM/fF8iZXJGdm6ej+avHtnMgDCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f717d20c-4b05-4163-81da-c6ab15633687",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "a63688f1-3bf4-425e-8d01-a82036fa9ed7",
                            LastGamePlayed = 1590673335L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "2cf2d837-0f65-43b0-8085-9fa576c485e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88827873-9de8-4167-b83f-695e195ef5e9",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAEAsoEjY85Re2JpCngXxmtT1Iyrdi5SSLbLVW9GAwuHPSVZqy1qA10SBjFtfX4gp58A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46e6e506-9959-4c14-b1fe-e7e8698500e7",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "2cf2d837-0f65-43b0-8085-9fa576c485e2",
                            LastGamePlayed = 1590673335L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
