// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "63454598-c8c6-434b-a067-1bf346a5cfc1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "63cadd00-d5ea-41ca-8763-e5df51159f0c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "911c789b-9f3b-4def-93b6-636733e7a0e4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a494ba54-9af3-4d2e-9bb5-44310c517ae1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "377e88ca-7356-48be-a2f9-fc32fe94c700",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "ffeaef44-072c-4756-891a-ae37c6b00eba",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "a3e3b09d-ae23-44f1-82c0-ea0bca0e56c8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "f80aecde-919f-4600-a98f-457aefbdc071",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "a865fec4-3757-4330-bc89-90d9cddf8904",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "ee7c1584-fffa-465b-86a5-43f10c62040e",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "710b35e5-af8f-4931-a4d6-95fa05655173",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "a8e3a7a9-ee97-4a60-94b6-f38025b673c0",
                            Name = "Simp",
                            Price = 2000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "600aa645-1106-4d4b-95ba-b47067152778",
                            Name = "Local Champion",
                            Price = 10000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "963e1bed-1db6-499b-b861-d76b95271124",
                            Name = "Absolute Legend",
                            Price = 100000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "2683610e-1f1e-4076-bae7-6f92dde0dad3",
                            Name = "Black jack master",
                            Price = 200000,
                            Type = 1,
                            Value = "BlackJackMaster.jpg"
                        },
                        new
                        {
                            ItemID = "0db18983-b588-4c7f-9444-bcb3df5761ac",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Type = 1,
                            Value = "CardPattern.jpg"
                        },
                        new
                        {
                            ItemID = "19606388-dea2-4ad5-ab06-8441309b8216",
                            Name = "Casino master",
                            Price = 500000,
                            Type = 1,
                            Value = "CasinoMaster.jpg"
                        },
                        new
                        {
                            ItemID = "2ae8d01a-cbd8-45e7-9277-0614abba5a8e",
                            Name = "Ace on fire",
                            Price = 50000,
                            Type = 1,
                            Value = "FireAce.jpg"
                        },
                        new
                        {
                            ItemID = "4c1b53ed-ad57-4001-a086-dbb0c5d9c22c",
                            Name = "Roulette master",
                            Price = 200000,
                            Type = 1,
                            Value = "RouletteMaster.jpg"
                        },
                        new
                        {
                            ItemID = "0fa8689d-3d5d-4f57-97e3-6e1670b64695",
                            Name = "Slot machine master",
                            Price = 200000,
                            Type = 1,
                            Value = "SlotMachineMaster.jpg"
                        },
                        new
                        {
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            Name = "Gambler",
                            Price = 0,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "06deddce-0bcb-4fc0-b888-e5b4d84c08f0",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "1ee8a279-d8e2-4832-b1e3-d837561ae437",
                            Name = "KingPin",
                            Price = 1000000,
                            Type = 0
                        },
                        new
                        {
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            Name = "Default background",
                            Price = 0,
                            Type = 1,
                            Value = "DefaultBackground.jpg"
                        },
                        new
                        {
                            ItemID = "47cab2af-c945-4eab-b6a7-a91444d7def8",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Type = 1,
                            Value = "TrueStalinGamesMaster.jpg"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "1f9962a4-5cd0-4ab2-bbe0-bc705fd721b7",
                            ItemID = "06deddce-0bcb-4fc0-b888-e5b4d84c08f0",
                            UserID = "a494ba54-9af3-4d2e-9bb5-44310c517ae1"
                        },
                        new
                        {
                            OrderID = "35c3aa00-d212-478f-ba1b-79fce996bc51",
                            ItemID = "1ee8a279-d8e2-4832-b1e3-d837561ae437",
                            UserID = "a494ba54-9af3-4d2e-9bb5-44310c517ae1"
                        },
                        new
                        {
                            OrderID = "9c8d497b-d9d1-44e1-b47f-fc5a7712358f",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "a494ba54-9af3-4d2e-9bb5-44310c517ae1"
                        },
                        new
                        {
                            OrderID = "8f5602a6-3419-442a-8a8d-79afadaf3dc9",
                            ItemID = "47cab2af-c945-4eab-b6a7-a91444d7def8",
                            UserID = "a494ba54-9af3-4d2e-9bb5-44310c517ae1"
                        },
                        new
                        {
                            OrderID = "5d098ac9-60c1-4e64-b7bb-c111bc65e820",
                            ItemID = "06deddce-0bcb-4fc0-b888-e5b4d84c08f0",
                            UserID = "ee7c1584-fffa-465b-86a5-43f10c62040e"
                        },
                        new
                        {
                            OrderID = "6b0c872e-db34-4d8b-b904-72d8d681599d",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "ee7c1584-fffa-465b-86a5-43f10c62040e"
                        },
                        new
                        {
                            OrderID = "20ce8c07-3989-40c3-8434-c55b92668664",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "f80aecde-919f-4600-a98f-457aefbdc071"
                        },
                        new
                        {
                            OrderID = "300d2bf2-7348-49c7-959b-1b4482d02e3a",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "a865fec4-3757-4330-bc89-90d9cddf8904"
                        },
                        new
                        {
                            OrderID = "19517288-f484-4251-b806-a409d1b66342",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "710b35e5-af8f-4931-a4d6-95fa05655173"
                        },
                        new
                        {
                            OrderID = "1317ea73-2cd6-4c5f-8000-ce7a7f490f55",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "ee7c1584-fffa-465b-86a5-43f10c62040e"
                        },
                        new
                        {
                            OrderID = "faf6051b-be32-4127-be03-39667d2b70a4",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "f80aecde-919f-4600-a98f-457aefbdc071"
                        },
                        new
                        {
                            OrderID = "b39f708c-4ecf-4a76-8a70-c4557123c803",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "a865fec4-3757-4330-bc89-90d9cddf8904"
                        },
                        new
                        {
                            OrderID = "68b943c7-2a01-4206-a5ff-3f90873b8d5d",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "710b35e5-af8f-4931-a4d6-95fa05655173"
                        },
                        new
                        {
                            OrderID = "ac0e7aa7-0232-4df0-aa3d-ed32f96bd336",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "ffeaef44-072c-4756-891a-ae37c6b00eba"
                        },
                        new
                        {
                            OrderID = "c7a1ac04-6bb2-45ae-b1dd-40813c2cc493",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "377e88ca-7356-48be-a2f9-fc32fe94c700"
                        },
                        new
                        {
                            OrderID = "78efbb1b-441c-471c-a271-2fbe03d4a745",
                            ItemID = "df76f660-6140-4c31-a0a5-5372e9b03239",
                            UserID = "a3e3b09d-ae23-44f1-82c0-ea0bca0e56c8"
                        },
                        new
                        {
                            OrderID = "e4c23b5d-2595-48f2-b8c6-f2679886820b",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "ffeaef44-072c-4756-891a-ae37c6b00eba"
                        },
                        new
                        {
                            OrderID = "9d54b50c-8d75-4c01-be0b-1e36b91a8980",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "377e88ca-7356-48be-a2f9-fc32fe94c700"
                        },
                        new
                        {
                            OrderID = "6f64068d-9055-43d4-9a0e-c5052709716a",
                            ItemID = "c01cdc9a-29eb-4994-911c-10968260006a",
                            UserID = "a3e3b09d-ae23-44f1-82c0-ea0bca0e56c8"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "a494ba54-9af3-4d2e-9bb5-44310c517ae1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bd73486-1600-4254-99be-33e61a06f4ff",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEbhm9AcpxmE8dd96CoakviSaeb+ZF4+bNd5Dm901YXoQRMV35ZiDBmA8ZwxdnUrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6f93b2d-8cd8-436d-8e29-8ee50c12ca1b",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "a494ba54-9af3-4d2e-9bb5-44310c517ae1",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "KingPin",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "377e88ca-7356-48be-a2f9-fc32fe94c700",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7c4dc96-0ef5-44c5-aa5d-9b5c30ce2ee7",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/IGVTMSyTwo5d6/1ODr/1TibplFq2gMjCo8+z2pvscUgex26Em9GmLuHfN8VB3PQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7827107d-ba53-406e-842c-f2bc9f6da123",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "377e88ca-7356-48be-a2f9-fc32fe94c700",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "ffeaef44-072c-4756-891a-ae37c6b00eba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59ddd289-041b-4726-ad70-a3f6dfca36a2",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+3fKo70qUr1sWzqeP5E177HpZnhpKn10f5SxOpVJHnnnWxMh+56Quuz/eEhArebw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89d2df96-1b3d-4c0f-8dc5-4b0679932ca8",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "ffeaef44-072c-4756-891a-ae37c6b00eba",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "a3e3b09d-ae23-44f1-82c0-ea0bca0e56c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0fc0ebb-619d-4d18-b5c4-41592c202373",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYt8uXxR+uj/P4Hcmu9UW8J5logsrsB+SEicBP1MJ/6N+gYjBvgGDpaDo7ja88hVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f2ace47-9cf6-4c24-a117-9e6ccff0b92e",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "a3e3b09d-ae23-44f1-82c0-ea0bca0e56c8",
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "f80aecde-919f-4600-a98f-457aefbdc071",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aac01f3c-7d0c-4118-93b0-e1a196c2c8b7",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAENJpMqqBjgNjc378QbvUMQbJN6jwodNRNg6q7oBe8R6794lB6WAYeBYxGhABSXoGsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d904a86d-8e2f-4b80-b9e9-6694808421d8",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "f80aecde-919f-4600-a98f-457aefbdc071",
                            LastGamePlayed = 1590666829L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "a865fec4-3757-4330-bc89-90d9cddf8904",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43f405e3-092c-492a-8b4d-32a63ad1a7cc",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHZM/VhlPC7m9JFo8Z/YUesrocUP/iari5+B5aqURWy/y90YXwUtmroSUBhJowZoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da008b0a-e001-4910-9c44-f3bac6e09831",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "a865fec4-3757-4330-bc89-90d9cddf8904",
                            LastGamePlayed = 1590666829L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "ee7c1584-fffa-465b-86a5-43f10c62040e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4e69bc4-9a72-4616-aeea-8cf666f18141",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEMTrQGSnbLvWov5Fpmab2dNiL3WnbhKo177ANTWPYUdpud/Evtet7ByBv/oz6T1QBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cf86062-476a-4a2b-9f45-a7bde678ce4a",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "ee7c1584-fffa-465b-86a5-43f10c62040e",
                            LastGamePlayed = 1590666829L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "710b35e5-af8f-4931-a4d6-95fa05655173",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2411ac6-dec0-456f-8b60-2f6543be65dd",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAECqP0g663x8qFeTwk0msq9h1G6ZlZOI07x2ZaSTUdjuKjzIk8H1iX71jliGu3mA0RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69f27fa5-4621-4f90-8a98-fcb6fee6f166",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            CreatedBy = "710b35e5-af8f-4931-a4d6-95fa05655173",
                            LastGamePlayed = 1590666829L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            Status = 0,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
