// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1844c21a-fe5e-43a3-93ad-651b207121fb",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "1f64226f-5295-4a0f-814a-5f92fe890bed",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "57b520c2-c751-4b9b-afd0-e9673cd86bde",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "953ad44d-a151-4d86-b733-6940417498f7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34a76cf9-8a60-45e1-9814-a633195b28de",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "48f9e0cd-e39b-4d78-a81f-1054c5da68f5",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "c2652ebb-5066-4f69-b150-015d1d8b35b9",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "98cc084f-a905-44dc-9c3a-ae47fce8f3bf",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "9875cbfd-0f27-40aa-a4e1-9c2d1e257093",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "fbe1da49-8fe5-4286-99ce-cccaaa0ed1c4",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "c055126e-2e94-4a75-aa06-1ef7659db01d",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "00b87bbf-9d2b-4fcb-aaad-b42895eabe24",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "bcefae9f-a830-426b-ae3b-b268953142c6",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "ff211ba1-3327-4d83-9259-2f53389550cc",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "8734dfa1-1af3-4527-925d-824f7e329a59",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "0234a0e8-687d-48c2-b974-f5760d7e267b",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "3eb9067e-22e4-4ddf-859e-883930f52b2a",
                            Name = "Wolf of Wall Street",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "4e489ded-2f03-4636-b05d-365ab2d1288a",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "b7bd13f6-f867-46d3-9f9c-d980f13b8f1b",
                            Name = "Default background",
                            Price = 0,
                            Value = "DefaultBackground.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "02cb26b6-8170-411a-941a-7d75a6f0fbaf",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "9d1de275-0c8d-4600-8e9b-328f61747127",
                            ItemID = "3eb9067e-22e4-4ddf-859e-883930f52b2a",
                            UserID = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8"
                        },
                        new
                        {
                            OrderID = "22b50a0b-4d42-4c02-b019-c2502de8b2ea",
                            ItemID = "4e489ded-2f03-4636-b05d-365ab2d1288a",
                            UserID = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8"
                        },
                        new
                        {
                            OrderID = "2ab2372c-a8c7-4b70-80cc-1051739cff24",
                            ItemID = "b7bd13f6-f867-46d3-9f9c-d980f13b8f1b",
                            UserID = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8"
                        },
                        new
                        {
                            OrderID = "60f65d3d-6a81-47ea-b552-420dfa73500a",
                            ItemID = "02cb26b6-8170-411a-941a-7d75a6f0fbaf",
                            UserID = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "1de9ba08-dcfc-4d01-91e9-54c8a3053ef8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13272b55-6afb-41b0-8a23-5b7b3b4b2fb6",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEHXhiOXZgms9oITroRO8YjtEoh/+vPjmlUIdWTqEf+Z7pk5xpYoIN0r9DEBA6Gtx9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71187ede-eeb5-4976-970e-e90efe94ce6d",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "953ad44d-a151-4d86-b733-6940417498f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f857d739-cd02-4dae-bfb1-169a1be7e36a",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEGn1XyO2Esx7RnnndTNm9tdsLklkz0woBqgI+Imhp1GQZwtmK/YPlGJ4a8NfcFnc/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edc82996-de46-42f9-85c1-96e0b23b09f2",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "34a76cf9-8a60-45e1-9814-a633195b28de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d555df70-687b-459b-b0ec-ded1bfc63ed0",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPptMbTSkYycKknI+3nJxjRohrD3UTRD2xT423Bf07kNyIBz2ycbrSj395wQt3F2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7796b77d-0a07-4acb-9a3b-54a16c7f68d5",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "48f9e0cd-e39b-4d78-a81f-1054c5da68f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d93006a6-c4bb-4281-a6e7-0bc29cf82307",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEBgJ58WFRvrWYU4v46Z6RyJty5lGLJf1gRxpTbt+eK/BqW3wr7FYj5wAWhEBGKmZ/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d272281b-e32f-408c-92a6-7d3f418b3d5e",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
