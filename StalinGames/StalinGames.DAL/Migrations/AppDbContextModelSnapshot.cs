// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "d62a8af1-c92e-44ea-bf3c-d58ea90388ec",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "3c995ae0-e065-4bd2-aa72-9e48e1eb3f64",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "597a700b-fc44-44b4-a4fb-b81c993ff084",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "4e2e3570-8cf7-49d8-a443-ffad065e2c38",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "201894e1-898e-4e91-bdee-137454fdf84a",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "84a807fc-f3a9-4095-9b95-b95a759ac5e8",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "64e9d43c-dc3b-416a-a4c1-e887f3b8b6b5",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "8e73da08-e483-41d6-a790-7e8c27963811",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "b7b0a235-036d-4822-8468-2e15743e4cc2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6df73de9-aa33-4d7c-9e1e-75ddd9db1998",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109a4cba-8431-417c-902b-33f721e205b6",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "b28ae19b-e00e-400d-8fce-ac5668ca8fb6",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "3e174df4-209c-43b4-82c3-8960c0a7f589",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "5cfd704c-c4a6-4dd8-88e5-47200fed4a15",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "07728ff2-0e3f-4a50-8de7-e261def7b1dd",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "42987eb6-2f49-4e22-bc4a-405208eb5d00",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "def890dd-3e34-4702-a4c0-d81971c5bddd",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "e076ede6-2f6d-4f1c-9384-6f76d1a4dba6",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "45484008-9951-4b66-a7b6-efeb76997911",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "08df8158-1ad2-407c-8a82-8b9138279bbe",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "791d63b8-e870-4a51-8f5c-bed5398493a7",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "a0259e50-4d9f-4839-b4ad-e8e5dbe211ff",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "287088c3-4acd-41ae-88d1-5d90a44ba7db",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            Name = "Default background",
                            Price = 0,
                            Value = "DefaultBackground.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "8aea1830-afb4-43b8-95f4-569eefb31d41",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "c95e3e41-eb7a-4bb7-87b5-1440f2ad8109",
                            ItemID = "a0259e50-4d9f-4839-b4ad-e8e5dbe211ff",
                            UserID = "4e2e3570-8cf7-49d8-a443-ffad065e2c38"
                        },
                        new
                        {
                            OrderID = "a7b09896-3ec6-4c1d-b5d3-b6f04002340d",
                            ItemID = "287088c3-4acd-41ae-88d1-5d90a44ba7db",
                            UserID = "4e2e3570-8cf7-49d8-a443-ffad065e2c38"
                        },
                        new
                        {
                            OrderID = "eac88137-de59-47ce-a720-022ad5671177",
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            UserID = "4e2e3570-8cf7-49d8-a443-ffad065e2c38"
                        },
                        new
                        {
                            OrderID = "123814f9-22c3-449b-b0b4-d550d188e9c2",
                            ItemID = "8aea1830-afb4-43b8-95f4-569eefb31d41",
                            UserID = "4e2e3570-8cf7-49d8-a443-ffad065e2c38"
                        },
                        new
                        {
                            OrderID = "de47e6a1-c3cc-479c-88df-819a8d5fc1b1",
                            ItemID = "a0259e50-4d9f-4839-b4ad-e8e5dbe211ff",
                            UserID = "6df73de9-aa33-4d7c-9e1e-75ddd9db1998"
                        },
                        new
                        {
                            OrderID = "0bec0849-72fb-4888-bcce-9cd7b2b5fb95",
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            UserID = "6df73de9-aa33-4d7c-9e1e-75ddd9db1998"
                        },
                        new
                        {
                            OrderID = "777dced8-46c5-45e8-9c47-2667b64e9e45",
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            UserID = "8e73da08-e483-41d6-a790-7e8c27963811"
                        },
                        new
                        {
                            OrderID = "987f281f-5f93-44d7-a5a2-8cf89cba3d2f",
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            UserID = "b7b0a235-036d-4822-8468-2e15743e4cc2"
                        },
                        new
                        {
                            OrderID = "750b41e6-eb27-4f93-a0c6-ed41cd433e53",
                            ItemID = "d260d87e-95c6-4b48-941c-0f2880a20967",
                            UserID = "109a4cba-8431-417c-902b-33f721e205b6"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "4e2e3570-8cf7-49d8-a443-ffad065e2c38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b658b5a9-e081-468e-862b-86aca13908fd",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ6IepSsjJ8wM5pDsKuLfpurR8Ad8kMXPGd2muA53I2cUlQskL1oZfkDXHJ2z06Cuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a2ce44c-4e87-440b-a9c9-d7cf46da3c21",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "201894e1-898e-4e91-bdee-137454fdf84a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da2d583a-8bfb-4e62-ad5b-1d1249a7a96e",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEDX0xdv8n871umueBr/rej7iR18eci/4yBw0WQBwdN/24lv2AmIXJ3F/4enlGejhKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fbeadba-3279-4972-8fda-b471c82847dd",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "84a807fc-f3a9-4095-9b95-b95a759ac5e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdd15c97-e88f-4917-9606-6cee037708e4",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFiVL70Dbxlu9YgSH9C0TdYKVTCZozigvCwNIz79QJbkx6aJOBSUp8sCiGjyXCNFxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fd30526-4265-4fc9-a616-bbc2ff2f58fd",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "64e9d43c-dc3b-416a-a4c1-e887f3b8b6b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f955de68-78c6-45c9-9f2f-ca6804fe6859",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPMMfJFp/hrxHP7P6sEKAooSG73lr9BmA5puyavMfDXoXbjJt6bsQS3QUESzgEySw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1f4e765-96e6-4edd-8e2b-49f5a38cb9d0",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "8e73da08-e483-41d6-a790-7e8c27963811",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dd8bd3e-a1e2-43d2-b347-19c98a814b4a",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiaIOAU6cTCBBfE5f463gueliknakrrxMimCFZprmXMDvbQ8Gqocs7rxshhOVkD7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af07fe86-8830-47d8-959a-078324ffa6fd",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(2020, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590263312L,
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "b7b0a235-036d-4822-8468-2e15743e4cc2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74d5e3a1-370a-46f1-be79-c7b4a21a97d4",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEDhyconuECH6uyBHr8B8+VGiok8OnApsEK9j3ZXAK9lN7Ihus1lY+mUoXOOWFKWtxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81941f71-e071-4658-b7be-5c4b5a7080ba",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(2020, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590263312L,
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "6df73de9-aa33-4d7c-9e1e-75ddd9db1998",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcbcc000-14b5-48ed-87c8-2c06803818ab",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGhKp/bg+qc7Tu1Fx5Nua75x2jKu8FJAFKuYinfxXmqPm0kjSM2SNb3AyNvHm9PKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0392722e-30a8-4de2-b9ad-f79156df6ed8",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(2020, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590263312L,
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "109a4cba-8431-417c-902b-33f721e205b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52102ca0-ebf3-417b-9180-5fd0833af443",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+HWBRtvscT1SRiRtLpCR7zEVx9PXVWB4T2VIE33qc5J0z2dKkvsy+Jonmu/zgcMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "615cf3ce-83bd-45ab-bb60-fd6aecfbeebe",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(2020, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590263312L,
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
