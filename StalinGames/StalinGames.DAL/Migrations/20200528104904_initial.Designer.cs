// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200528104904_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "18479d82-f5cf-4ebc-b4f5-e37f46b373ae",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "a1c96621-d1ea-47f6-8122-e863d1df33be",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "1b12e147-1352-4e9c-800e-4419750ba2e4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4fa470e7-f490-491a-9f16-1c21d0619dbf",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38f3e347-ba31-47e5-9869-8f72ae9fc912",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "db55fa4b-c96f-4a3c-a633-1c9abb5dae33",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ec1224f8-ee59-448e-b3f6-bb3391cf3e25",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "daee6e46-bbfd-44b8-92e0-438d1c5b156b",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "cce0391c-84ae-4532-890b-1468b7c8e534",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "852d3c02-291f-46ca-9d4c-e7d1100ab90c",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "a9d6fdef-3755-42af-b18b-ba7a592def3f",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "7e4b3e1d-c511-47d9-a004-526a7bb6dc85",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "7de5d55b-0ac3-4ddd-abe6-f8bc93253cc9",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "e42758af-61f2-497e-b872-a3a15d9a186e",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "251f92dc-3888-4a47-b4a0-a9f1999667e1",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "bb9d86f9-1850-4f8c-8782-f611d3d0673c",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "887c1b7c-0aa0-4720-a323-7c20f6a483b9",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "7d079c31-2e0b-4015-9355-3852ed408a67",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "bfd29c2a-5f3b-40b6-bc8e-f6b32eb7d468",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "b172e441-6785-41d9-89c1-6d4303fbc5db",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "d78e768a-ccb0-4425-b0b2-aca042d04825",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "e8c9978b-af1a-48c8-9290-af254257b28b",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            Name = "Default background",
                            Price = 0,
                            Value = "DefaultBackground.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "19b3db47-222a-4a07-b2cc-ef6c5d8e51e9",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "5ed5f55a-3da5-4936-a4e7-5ea560258afa",
                            ItemID = "d78e768a-ccb0-4425-b0b2-aca042d04825",
                            UserID = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7"
                        },
                        new
                        {
                            OrderID = "e187a936-0761-4913-ad73-09f856debab1",
                            ItemID = "e8c9978b-af1a-48c8-9290-af254257b28b",
                            UserID = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7"
                        },
                        new
                        {
                            OrderID = "628737c9-e376-48e3-8f81-5975304e20e4",
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            UserID = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7"
                        },
                        new
                        {
                            OrderID = "55711d46-9167-4fe6-91fe-5c02d700a9c6",
                            ItemID = "19b3db47-222a-4a07-b2cc-ef6c5d8e51e9",
                            UserID = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7"
                        },
                        new
                        {
                            OrderID = "a833277c-0a10-4b5a-b202-4e358402c1b9",
                            ItemID = "d78e768a-ccb0-4425-b0b2-aca042d04825",
                            UserID = "cce0391c-84ae-4532-890b-1468b7c8e534"
                        },
                        new
                        {
                            OrderID = "a1d570ab-6341-4d02-a1e3-b07732a9f43e",
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            UserID = "cce0391c-84ae-4532-890b-1468b7c8e534"
                        },
                        new
                        {
                            OrderID = "98488108-e07b-4363-beb0-1cfd3ed7576b",
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            UserID = "ec1224f8-ee59-448e-b3f6-bb3391cf3e25"
                        },
                        new
                        {
                            OrderID = "eec625ed-0eef-4236-b4df-ba0b1d56c558",
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            UserID = "daee6e46-bbfd-44b8-92e0-438d1c5b156b"
                        },
                        new
                        {
                            OrderID = "9251f5ad-4f00-4717-af06-6d544c72967a",
                            ItemID = "4d792d6a-6152-4ad0-bf9f-076baa1d996d",
                            UserID = "852d3c02-291f-46ca-9d4c-e7d1100ab90c"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "36ce32f1-83a3-4eb3-a0a1-6f69e4df21e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b94d19e-0b13-451e-8652-59b74fb8007f",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEDMGqZTQnAraJfhNi9buLebj4cm1elSjKxSM0vShpRTBm8ElIVZs1arhccdxqfyr9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74805d6e-3fb8-49b2-91b4-f909473f80cf",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "4fa470e7-f490-491a-9f16-1c21d0619dbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "745836ce-d9bc-4f66-8234-862dbec81ae7",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJAvMpGfWaANkTnNxfCJTObtRYoNYGwy59sRlzrnXAN7mrXIngnylw4fqXOcPppI/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c81f194c-d743-4169-95a6-25bed8115987",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "38f3e347-ba31-47e5-9869-8f72ae9fc912",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61c8ee2c-91b9-4f2d-abe2-e7f0e22a9d86",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEF9Ya5tDueM1BD7Ryv5OsHWriu1Zpw3i4PfhW862jHX+DhW59Q4eHccILSoWuxMcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "402172f3-1a4a-459b-97fd-67a854ae87bc",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "db55fa4b-c96f-4a3c-a633-1c9abb5dae33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5498e3e5-8cb6-4cfd-be2c-d0da9dd0a134",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEDXNf6eVDMjA+i1P/6BKBRykDkK3zbc6B3X0fCGqVAnnhdPSe6lFnjeKqMHK8nPJ7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0ac6cf5-2e92-4140-aaad-9936be33476d",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "ec1224f8-ee59-448e-b3f6-bb3391cf3e25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9643b2eb-64d3-4818-ba39-c9cd6d4415c6",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7Aht9v4UYNt+mWSw2W8OEcMPHIMlD09pcELLZPAVyz0Al6I/xB1R2Jv0PrBvGSeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a383470-7520-4eae-8cc3-eaa50850ab91",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590662944L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "daee6e46-bbfd-44b8-92e0-438d1c5b156b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27801794-c5d5-4a6b-927b-bc12235dd365",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGkhjXm9byRaF/m5jR7Ro6unaAkTKq0C3rVlJ0UF3+8/gPDfT4Qb1pbNGZBk9xaag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0258caaa-c6dc-4a4e-a636-3b4e22e6567f",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590662944L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "cce0391c-84ae-4532-890b-1468b7c8e534",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1435725e-c929-4976-a0d0-e0a5707eff97",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEMzktHzzyRzogxfjFhe+e4DEQg7ZVsWkh7LK7pea3wSKynL7rXnZJeyBwQH/Pi+0sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18a6ae24-0339-48cb-a963-a83d9852d588",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590662944L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "852d3c02-291f-46ca-9d4c-e7d1100ab90c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "149ef18b-adce-4589-a6e8-813f66671393",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAEOasVN/y4+fRMZKwoYK3KzA0dIaTARDCAlQ6fKWCbYH75tePTPeWKiiG93uzOCjxdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aaef01c3-1412-4589-a8d9-4c64a052012a",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 1590662944L,
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileTitle = "Gambler",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
