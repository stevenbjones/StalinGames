// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200511145035_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "b70e0fe1-6ffa-46c1-b7a9-394cabd3ae1e",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "d724ee23-44c2-4cc5-a5a2-142a4531abe4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "2adca980-c86b-446b-9f61-183c6eb5a13a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "043a0cd9-9f01-4921-bb7e-cd46cd852e32",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "b9620fce-cab5-4006-9827-e946f736fbb3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a47b16bd-bd1e-45ce-8fb3-dbff1c40c87f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "59e2ecb0-5584-4845-9fb6-0c83ac8b0106",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "ccce3e54-74b8-4fba-bbac-288b07f5a314",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "73f31485-0aea-4fb9-b629-a41f6b1c5cdd",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "b3dc130b-7b12-4254-b367-02c7574d5a84",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "a0ba85cb-4c06-4b79-9ffb-fb6a87dbdf66",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "4b205760-94dd-4be2-883b-36670ff78db6",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "e7e4ce71-2d18-403f-9dc8-91c990ea0ef5",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "c0d66d31-b92e-437b-b752-9495749ecb37",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "077faa2c-67c4-4a29-8ca0-e9bcf6524a0e",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "534146c6-cdb8-4c03-a025-32cd5c111e0f",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "12f488d1-efcb-4be3-a674-7b26ed2fcb41",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "91eb8406-e5ea-42f6-a118-443575571ffe",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "afbef5e9-1991-49a6-bc2d-c401d69d48e0",
                            Name = "Wolf of Wall Street",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "3986abac-0767-4db7-9417-14f4f4a0f979",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "126fe372-08c8-4125-be19-0194d372be0a",
                            ItemID = "afbef5e9-1991-49a6-bc2d-c401d69d48e0",
                            UserID = "043a0cd9-9f01-4921-bb7e-cd46cd852e32"
                        },
                        new
                        {
                            OrderID = "657256fa-f242-47a9-bfa9-53668416aabd",
                            ItemID = "3986abac-0767-4db7-9417-14f4f4a0f979",
                            UserID = "043a0cd9-9f01-4921-bb7e-cd46cd852e32"
                        },
                        new
                        {
                            OrderID = "21a6992d-68c8-4d25-ac89-8461e878798f",
                            ItemID = "cfcac2df-92e0-4862-9f2b-fa648eb62c90",
                            UserID = "043a0cd9-9f01-4921-bb7e-cd46cd852e32"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "043a0cd9-9f01-4921-bb7e-cd46cd852e32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0964c179-ee1e-42cd-a952-57e6261e1446",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEIF69UM6W7Gbn2U8SgzvA32Sp5xQTfuHb7f+8h6pGF9D5V5Ghy7JUc4eQr3xCLIuCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3804006e-11e8-40bb-ac43-c5117df402f4",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "b9620fce-cab5-4006-9827-e946f736fbb3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1380a6d9-df8a-4763-8135-b67a6c496fe3",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRj2mCSqiteQcPDlosRdbEEYASdzdkBlWIXWqQkAePIK4yXEr+cVvpg2wapoYHQWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c24ec87-a994-4963-a2ac-cb9bc0b4446f",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "a47b16bd-bd1e-45ce-8fb3-dbff1c40c87f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9259e67e-2d82-4f86-bf34-d0f6a57191f7",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFUL6tc4/whLWGaoqrG9yg1dvYSaBJY/ZpoKFKst+6CDh5PDY3obZ+ZvM5kiQGtu2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3de0c5ff-c416-4b0a-b889-a00886b99caf",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "59e2ecb0-5584-4845-9fb6-0c83ac8b0106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a21293b9-1c77-4cfd-86e5-adb8e6a7688e",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzdI82qebWqG/xgQTSqq9FkgY81oqFi+83XOoKhlJm6LDf4eefOdTzxOoFCiR8bAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8dfc01c-8788-4462-9bbb-e9badaa4d4ee",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
