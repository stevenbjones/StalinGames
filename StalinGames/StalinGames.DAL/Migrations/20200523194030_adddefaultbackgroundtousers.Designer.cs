// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200523194030_adddefaultbackgroundtousers")]
    partial class adddefaultbackgroundtousers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1ffd62da-1cb8-46ee-95d9-ed8c05b282bf",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "172986b2-802d-41a7-b573-a3a349b31bd9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "34ab4a34-4f33-41ac-acc0-cabb47a043eb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "bf204a27-bceb-4ba4-b254-d51c117160f7",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "468dac6f-55a6-42d1-824d-e7e4c8224e7f",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "03470246-a39c-4f62-9074-01ccceb4c393",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "30f6be09-dae8-4366-9889-8ef233b671da",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "560bf694-fb85-42af-889a-20f8c1c92613",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "30c2d10d-0aac-4095-b796-3d3a63a23216",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2476ef9e-6c79-4eb3-b20b-cfd817910843",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "d450060a-fe94-4126-b487-0cf8dbb66f1c",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "cdf24de5-2b7d-4457-bd1b-cad9e31bb6d2",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "4a2f9da9-e2df-4363-ba74-8977d84d9e03",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "f3e4d1f9-f3e9-43b1-8111-254da8b412ad",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "b7c74320-7258-47e0-bafb-f0a163bd174c",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "11e5551d-7ea9-4108-9ad2-448dadae0c65",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "5cdb6c94-64a2-49cd-a395-27188e0fa7d8",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "81d91f37-5841-4a6c-87c9-796969eb69d2",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "b6c42c46-46db-4e79-bf36-b8ebaa61c167",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "f0a89e2a-3a35-49ad-83b7-14b5be72b058",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "f994ab7a-f25d-4a0a-9bd3-2a56e9cb75d3",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "30c87182-b4ea-4b80-8988-24806633823e",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "01402636-9a0c-48c8-a922-264d118f67c1",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            Name = "Default background",
                            Price = 0,
                            Value = "DefaultBackground.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "51ea3e43-e7ed-4b11-a795-fc39729fdf4a",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "48552e69-0665-4aa5-8691-ce4b82f3e4e7",
                            ItemID = "30c87182-b4ea-4b80-8988-24806633823e",
                            UserID = "bf204a27-bceb-4ba4-b254-d51c117160f7"
                        },
                        new
                        {
                            OrderID = "89776a87-9e86-4174-985e-79ce839ae773",
                            ItemID = "01402636-9a0c-48c8-a922-264d118f67c1",
                            UserID = "bf204a27-bceb-4ba4-b254-d51c117160f7"
                        },
                        new
                        {
                            OrderID = "ebcbd5ae-24ce-417a-a64c-032178fcfa41",
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            UserID = "bf204a27-bceb-4ba4-b254-d51c117160f7"
                        },
                        new
                        {
                            OrderID = "a2e97819-add7-4211-a7f8-4ac4739896c2",
                            ItemID = "51ea3e43-e7ed-4b11-a795-fc39729fdf4a",
                            UserID = "bf204a27-bceb-4ba4-b254-d51c117160f7"
                        },
                        new
                        {
                            OrderID = "a301194d-52cd-4e06-9a85-0c68fcac8b59",
                            ItemID = "30c87182-b4ea-4b80-8988-24806633823e",
                            UserID = "2476ef9e-6c79-4eb3-b20b-cfd817910843"
                        },
                        new
                        {
                            OrderID = "32325323-15cc-4b43-88b3-b8269fb86293",
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            UserID = "2476ef9e-6c79-4eb3-b20b-cfd817910843"
                        },
                        new
                        {
                            OrderID = "aca855ba-7245-4d2d-9d19-2aa4fbe027ed",
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            UserID = "560bf694-fb85-42af-889a-20f8c1c92613"
                        },
                        new
                        {
                            OrderID = "28578c96-061b-4c4a-a2e4-5a6271e66965",
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            UserID = "30c2d10d-0aac-4095-b796-3d3a63a23216"
                        },
                        new
                        {
                            OrderID = "b8e834d5-5c82-4b82-8eb8-57c84a5bfd0d",
                            ItemID = "70a296b4-d952-49a8-8952-e95332c1574d",
                            UserID = "d450060a-fe94-4126-b487-0cf8dbb66f1c"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "bf204a27-bceb-4ba4-b254-d51c117160f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f748198-44e5-439c-9a11-10a8b2efe8b5",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEMI3QzkccFQo7Po5OxCUPUaxpnfPR9RWq7kC7CUODZl5es6E17os8ACCZ3rTYwq4/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f48ca5b-0769-4167-a46c-5295c718bcd2",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "468dac6f-55a6-42d1-824d-e7e4c8224e7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c673cf27-ebee-4ae4-b035-a9209d824f7d",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEChF6S7BCice9ozsn4PrU7xGVbmOoJ/lx3Y3DsZOhrcDmmlOKj4eax7IjZiY+7VwrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd13cfed-c062-4c1c-b70f-e3fe8aa28104",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "03470246-a39c-4f62-9074-01ccceb4c393",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38703a77-14a2-4d7e-a5e2-474d1d811855",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEVbRKmFODlCJ8GvT6LoYY/k5Bm3r26plZXbzdP4PcqcH8NpBIMf5CzcSTC0xapJJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a8d46bb-d005-4288-b17c-47a3c68d12b8",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "30f6be09-dae8-4366-9889-8ef233b671da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1e4109d-98ad-4122-b578-b075a2cdd013",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEFTDeZRgXHzlko6MrAxX3Wndp3ymkFZG+GOc17GJso7tbHZBNiYXmtul5Ag/nbV8/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65e82e1a-5ab9-4913-b0f3-0aa7760acebc",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "560bf694-fb85-42af-889a-20f8c1c92613",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aef9258b-0d26-47c5-a121-cebc68e776ad",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAEH5/VpsvarcMgsEMoVQqmUnQDDNIit6Dr5ScgWuPr5d+0jLdGJIKFG1JWQ+LWgKX5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "222c1537-6ba2-4816-b780-894ead8b0947",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "30c2d10d-0aac-4095-b796-3d3a63a23216",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c502366d-84ef-4913-8c9e-08661d0d9dcb",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEHhVEhhy1aWOwa/THDUstxrtdD4Xep/L5M8EXLjvtj2csI8IySbSL06V0nThEH/h1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "897e62ae-425d-446b-bde0-6047319cbdeb",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "2476ef9e-6c79-4eb3-b20b-cfd817910843",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdb40d0a-e294-4627-8fd3-26a03869e0bb",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEMTSYkERjqul3vNXNTKbNOU4ufcxMvK71FYTM+RQnSRLw41adyDRH/GiWiW4hsWIaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b194ce4f-4534-4526-b0d6-39e561b5ac59",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "d450060a-fe94-4126-b487-0cf8dbb66f1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5185b40-1eb0-4abd-bfcb-67fa471b18f4",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPz1pza0XUaJSr81R327KL51a4FBlQwKIQ5EQ6sSgcyc+dtvXQ5ekoLe9l+ceXP/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c33c63ca-ba3e-4730-b528-f5bcfb5a5e6a",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
