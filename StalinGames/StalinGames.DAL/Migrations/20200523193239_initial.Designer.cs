// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalinGames.DAL.Context;

namespace StalinGames.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200523193239_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "55c56c99-bcad-4098-b611-96e294070568",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "329ee51d-9554-49d3-ba3a-5bafc97cd870",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "c367796e-296b-4a78-b1e0-af0440fd564e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e5e1216b-6aa4-49b5-9f05-452e704c377b",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "e2e86a6a-fd39-4ebd-b00f-5f39ce9700b8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "dae85a09-79fe-47e2-b733-afd35727520e",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "acd885ef-b705-4e8f-89d3-fa52eb1ccc3f",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "de2409da-5322-44da-85ce-ef5af9c81080",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "af29d398-5ae0-414c-b5de-07c2e8364a1c",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5cbe2019-de2e-46ac-97a0-cf20b01b9626",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "9bf697a9-144d-4967-a8cc-28af82c39c35",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerItem", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("itemType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PlayerItems");

                    b.HasData(
                        new
                        {
                            ItemID = "983c1dc6-8dd1-4447-b999-7df7158884a6",
                            Name = "Gambler",
                            Price = 0,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "66f21c6c-ec39-48a5-ad19-3de0b7ffe0f0",
                            Name = "Simp",
                            Price = 2000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "56e38f48-2e86-428d-90a9-56f6f2c4b2be",
                            Name = "Local Champion",
                            Price = 10000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "e20e6ef5-e9d4-4a79-979f-59f22d0374fd",
                            Name = "Absolute Legend",
                            Price = 100000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "0064462d-f17f-46a3-a26b-e065090ece2b",
                            Name = "Black jack master",
                            Price = 200000,
                            Value = "BlackJackMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "5d89333d-00b4-4ef5-b402-67c5367ca978",
                            Name = "Simple card pattern",
                            Price = 5000,
                            Value = "CardPattern.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "4c4e5f14-3499-4372-8403-914c43326570",
                            Name = "Casino master",
                            Price = 500000,
                            Value = "CasinoMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "71d0bb5c-e303-43cc-9a87-48bc80f3bde6",
                            Name = "Ace on fire",
                            Price = 50000,
                            Value = "FireAce.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "c187ba4f-4127-4dc3-a2e3-d647ea9266dd",
                            Name = "Roulette master",
                            Price = 200000,
                            Value = "RouletteMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "58a08eda-7ab2-4f68-ad55-b4ac0a1b93d7",
                            Name = "Slot machine master",
                            Price = 200000,
                            Value = "SlotMachineMaster.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "fd7e6639-3025-4cc6-bc6f-5d2768dd7957",
                            Name = "Wolf of Wall Street",
                            Price = 500000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "57ff676e-f674-4af4-9b2d-2819aaf83765",
                            Name = "KingPin",
                            Price = 1000000,
                            itemType = 0
                        },
                        new
                        {
                            ItemID = "8fd88427-1a99-4c07-92bc-e39db894da9d",
                            Name = "Default background",
                            Price = 0,
                            Value = "DefaultBackground.jpg",
                            itemType = 1
                        },
                        new
                        {
                            ItemID = "8f560516-670a-4346-800c-d8849972bcb6",
                            Name = "Ultimate true StalinGames casino master",
                            Price = 1000000,
                            Value = "TrueStalinGamesMaster.jpg",
                            itemType = 1
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.PlayerPurchase", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.ToTable("PlayerPurchases");

                    b.HasData(
                        new
                        {
                            OrderID = "092ddc63-7c43-4129-843b-a48313a74fe9",
                            ItemID = "fd7e6639-3025-4cc6-bc6f-5d2768dd7957",
                            UserID = "e5e1216b-6aa4-49b5-9f05-452e704c377b"
                        },
                        new
                        {
                            OrderID = "beb5fddc-a9af-4402-8d1a-94a1f26f2745",
                            ItemID = "57ff676e-f674-4af4-9b2d-2819aaf83765",
                            UserID = "e5e1216b-6aa4-49b5-9f05-452e704c377b"
                        },
                        new
                        {
                            OrderID = "fcf5c83f-970f-47a0-9a43-1d2651ea9bc5",
                            ItemID = "8fd88427-1a99-4c07-92bc-e39db894da9d",
                            UserID = "e5e1216b-6aa4-49b5-9f05-452e704c377b"
                        },
                        new
                        {
                            OrderID = "ca3016e3-401b-430d-a62b-a041721efea1",
                            ItemID = "8f560516-670a-4346-800c-d8849972bcb6",
                            UserID = "e5e1216b-6aa4-49b5-9f05-452e704c377b"
                        },
                        new
                        {
                            OrderID = "268f0b06-4e86-4c46-960a-e14ade9c67a0",
                            ItemID = "fd7e6639-3025-4cc6-bc6f-5d2768dd7957",
                            UserID = "5cbe2019-de2e-46ac-97a0-cf20b01b9626"
                        });
                });

            modelBuilder.Entity("StalinGames.DAL.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Blyats")
                        .HasColumnType("int");

                    b.Property<long>("LastGamePlayed")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalBlyatsLost")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "e5e1216b-6aa4-49b5-9f05-452e704c377b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9f9febc-573d-461a-bf2e-044322003efe",
                            Email = "Jens@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JENS",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpKO9kB4DSai7pNMDYg0CDRZcwNBDNbjKonBuG7LFDUZIQxZ7p4/oYUzPrFkptFfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09a0e607-6438-4241-b454-5d87440386d5",
                            TwoFactorEnabled = false,
                            UserName = "Jens",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BackGround = "Default background",
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            ProfileTitle = "KingPin",
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "e2e86a6a-fd39-4ebd-b00f-5f39ce9700b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eb882ac-d9af-41dd-b9ae-c13ce35e6b57",
                            Email = "frederik@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "FREDERIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJs+cs9MwYA3OCX5lIY0rQqEe2IGcsedEHaXMfFopaW4rVvUFXFeZc9PW9bx9R3rSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86647a69-c5f6-4b0b-8459-30fbcb69e5a4",
                            TwoFactorEnabled = false,
                            UserName = "frederik",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "dae85a09-79fe-47e2-b733-afd35727520e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5068c560-9971-4716-8f79-e7e679c88592",
                            Email = "peter@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PETER",
                            PasswordHash = "AQAAAAEAACcQAAAAECXpbl1ya79Vl1hqU9OuZI1vQJ7oOGDjchrl1vqqyxT8Ox0czpXFw9lx9Q/zp/ZlMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83e70c8f-fc6e-4e7b-9fb9-9cb576193803",
                            TwoFactorEnabled = false,
                            UserName = "peter",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "acd885ef-b705-4e8f-89d3-fa52eb1ccc3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e32f5eee-dacd-4d8b-a13c-0a51eedd411b",
                            Email = "steven@StalinGames.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "steven",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdG82+EfC2ZnDpL+G/MJQeTPZg9Pn+6xRuH4R3qqTiHst3ghCJN/DWnVZLRKLPuyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8ad211a-8a89-417f-9e83-6ef957ae848f",
                            TwoFactorEnabled = false,
                            UserName = "steven",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "de2409da-5322-44da-85ce-ef5af9c81080",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17ca9f60-2374-4102-8cf9-2f4c8eac6b09",
                            Email = "frank@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "frank",
                            PasswordHash = "AQAAAAEAACcQAAAAEB2o1vPM3N8NCy1+SK9WGyIrkhZja99l822HvQ7tugLtomE0IF8uc7ju5gFYqI2lSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6553482c-5f3d-4186-80a1-8dce4667ef5b",
                            TwoFactorEnabled = false,
                            UserName = "frank",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "af29d398-5ae0-414c-b5de-07c2e8364a1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "748ec81b-cac3-4bbe-b7e7-648d289a7ad1",
                            Email = "jan@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "jan",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvkL711a+bDagutmH0V1mteuWl/TA0ITKpabqc98ivPs+tSR4mwZ1dVi/Xc1R88QQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc88d6ac-5463-4d32-9bc6-91ebbefa0864",
                            TwoFactorEnabled = false,
                            UserName = "jan",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "5cbe2019-de2e-46ac-97a0-cf20b01b9626",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5326cba1-5f18-4ad4-ad0b-e8bcb3075d44",
                            Email = "eddy@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "eddy",
                            PasswordHash = "AQAAAAEAACcQAAAAEJta4I9zTn2dHpC6PO8ULZGqGWj5qpfCtp2p99CPb4+o0o1BbV7kHNTVSPltuxgMVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5148c92f-a348-4ce4-8da9-96be338c32b3",
                            TwoFactorEnabled = false,
                            UserName = "eddy",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        },
                        new
                        {
                            Id = "9bf697a9-144d-4967-a8cc-28af82c39c35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "057444d5-ee69-479e-9e42-2e03895dba22",
                            Email = "karel@Gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "karel",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTyt73+WyaPCrZ470AzuNwWoEFUZWeXUcdGqhfAzk+cSzfx6mwCaP8Wk7bgCLkmRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7437ada2-f86e-4026-8667-20d683b79e87",
                            TwoFactorEnabled = false,
                            UserName = "karel",
                            AccountCreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blyats = 2000,
                            LastGamePlayed = 0L,
                            TotalBlyatsLost = 0,
                            TotalGamesPlayed = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
